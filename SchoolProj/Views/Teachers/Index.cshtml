@model  SchoolProj.ViewModels.TeacherViewModel

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<div class="form-group row">
    <div class="col-md-12">
        <button type="button" id="btnAddNewTeacher" class="btn btn-success"><span class="glyphicon glyphicon-plus"></span> New Teacher</button>
    </div>
</div>

<div id="teacherData_Placeholder"></div>

<div class="modal fade" id="teacherModal" tabindex="-1" role="dialog" aria-labelledby="teacherModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="teacherModalTitle"></h5>
                <button type="button" id="btnCrossClose" class="close" title="Close" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label " })
                        @Html.EnumDropDownListFor(model => model.Gender, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label " })
                        @Html.EnumDropDownListFor(model => model.Department, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="btnClose">Close</button>
                <button type="button" class="btn btn-primary" id="btnSave">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="module">
        import {
            h,
            html
        } from "/Scripts/gridjs.production.es.min.js";

        let _h = h;
        let _html = html;

        function clearTeacherModel() {
            $("#Name").val("");
            $("#Gender").val("0").change();
            $("#Department").val("0").change();
            $("#PhoneNo").val("");
            $("#Email").val("");
            $("#Address").val("");

            $("#teacherModal").modal("hide");
        }

        function requiredValidation() {
            let result = true;

            if ($("#Name").val() == "") {
                alert("Please, enter name.");
                result = false;
            }

            if ($("#Gender").val() == "0") {
                alert("Please, choose gender.");
                result = false;
            }

            if ($("#Department").val() == "0") {
                alert("Please, choose department.");
                result = false;
            }

            if ($("#Email").val() == "") {
                alert("Please, enter email.");
                result = false;
            }

            return result;
        }

        function updateTeacher(id) {
            alert(id);
        }

        function viewTeacher(id) {
            alert(id + " View");
        }

        function deleteTeacher(id) {
            alert(id + " Delete");
        }

        function loadIndex() {
            $("div#teacherData_Placeholder").html("");
            $.ajax({
                url: "/Teachers/GetTeachers",
                type: "GET",
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                dataType: "json",
                success: function (data) {
                    if (data.success) {
                        let json_data = data.data;
                        let result = [];

                        $.each(json_data, function (index, row) {
                            let row_result = [];
                            $.each(row, function (col) {
                                row_result.push(row[col]);
                            });
                            result.push(row_result);
                        });

                        $("div#teacherData_Placeholder").Grid({
                            columns: [
                                "Name",
                                "Gender",
                                "Department",
                                "Phone No.",
                                "Email",
                                "Address",
                                {
                                    name: 'Actions',
                                    formatter: (cell, row) => {
                                        let buttons = [];
                                        buttons.push(_h('button', {
                                            className: 'btn btn-xs btn-success',
                                            onClick: () => updateTeacher(`'${cell}'`)
                                        }, _html('<span class="glyphicon glyphicon-pencil"></span> Edit')));

                                        buttons.push(_h('button', {
                                            className: 'btn btn-xs btn-primary',
                                            onClick: () => viewTeacher(`'${cell}'`)
                                        }, _html('<span class="glyphicon glyphicon-eye-open"></span> View')));

                                        buttons.push(_h('button', {
                                            className: 'btn btn-xs btn-danger',
                                            onClick: () => deleteTeacher(`'${cell}'`)
                                        }, _html('<span class="glyphicon glyphicon-trash"></span> Delete')));

                                        return buttons;
                                    }
                                    //formatter: (idCell) => _html(`<div class="row col-md-12"><a href='#' class='btn btn-link' onclick=updateTeacher('${idCell}')><span class='glyphicon glyphicon-pencil'></span> Edit</a>
                                    //        <a href='#' class='btn btn-link' onclick=viewTeacher('${idCell}')><span class='glyphicon glyphicon-eye-open'></span> View</a>
                                    //        <a href='#' class='btn btn-link' onclick=deleteTeacher('${idCell}')><span class="text-danger"><span class='glyphicon glyphicon-trash'></span> Delete</span></a></div>`)
                                }
                            ],
                            search: {
                                enabled: true
                            },
                            sort: true,
                            pagination: {
                                enabled: true,
                                limit: 5,
                                summary: true
                            },
                            data: () => {
                                return new Promise(resolve => {
                                    setTimeout(() => resolve(result), 2000); // equal 2 seconds
                                });
                            }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.log("error : " + error);
                }
            });
        }

        $(document).ready(function () {
            loadIndex();

            $("#btnAddNewTeacher").on("click", function () {
                $("#teacherModalTitle").text("Add Teacher");
                $("#teacherModal").modal("show");
            });

            $("#btnSave").on("click", function () {
                if (requiredValidation()) {
                    $.ajax({
                        url: "/Teachers/Create",
                        type: "POST",
                        data: $("form").serialize(),
                        success: function (data) {
                            if (data.success) {
                                $("#teacherModal").modal("hide");
                                window.location.reload();
                            }
                            else {
                                alert("Something is wrong!");
                            }
                        },
                        error: function (xhr, status, error) {
                            console.log("error : " + error);
                        }
                    });
                }
            });

            $("#btnClose, #btnCrossClose").on("click", function () {
                clearTeacherModel();
            });
        });
    </script>
}